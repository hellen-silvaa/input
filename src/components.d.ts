/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface FsnInput {
        "disabled": boolean;
        "helperText": string;
        "label": string;
        "optional": boolean;
        "placeholder": string;
        "status": string;
        "value": string;
    }
}
export interface FsnInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFsnInputElement;
}
declare global {
    interface HTMLFsnInputElementEventMap {
        "valueChanged": string;
    }
    interface HTMLFsnInputElement extends Components.FsnInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLFsnInputElementEventMap>(type: K, listener: (this: HTMLFsnInputElement, ev: FsnInputCustomEvent<HTMLFsnInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLFsnInputElementEventMap>(type: K, listener: (this: HTMLFsnInputElement, ev: FsnInputCustomEvent<HTMLFsnInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLFsnInputElement: {
        prototype: HTMLFsnInputElement;
        new (): HTMLFsnInputElement;
    };
    interface HTMLElementTagNameMap {
        "fsn-input": HTMLFsnInputElement;
    }
}
declare namespace LocalJSX {
    interface FsnInput {
        "disabled"?: boolean;
        "helperText"?: string;
        "label"?: string;
        "onValueChanged"?: (event: FsnInputCustomEvent<string>) => void;
        "optional"?: boolean;
        "placeholder"?: string;
        "status"?: string;
        "value"?: string;
    }
    interface IntrinsicElements {
        "fsn-input": FsnInput;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "fsn-input": LocalJSX.FsnInput & JSXBase.HTMLAttributes<HTMLFsnInputElement>;
        }
    }
}
